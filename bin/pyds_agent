#! /usr/bin/env /usr/bin/python

import httplib
import json
import time
from email.utils import parsedate
import itertools
import random
import getopt
import sys

PREFIX = '7ebb8929'
SCHEMA = 'https://'
SERVER = 'dweet.io'
POST_URL = '/dweet/for/'
GET_URL = '/get/latest/dweet/for/'
TTL = 7*60


def get_thing(tag):
    return '-'.join((PREFIX, tag))


def get_dweet(thing):
    while True:
        time.sleep(1 + random.random()*3)
        c = httplib.HTTPConnection(SERVER)
        c.request('GET', GET_URL + thing, headers={'Content-type': 'application/json'})
        r = c.getresponse()
        if r.status < 300:
            body = json.loads(r.read())
            ts = int(time.mktime(parsedate(r.getheader('date'))))
            if body['this'] == 'succeeded':
                content = body['with'][0]['content']
                return content, ts
            elif body.get('with') == 404:
                return {}, ts


def upd_dweet(thing, content):
    c = httplib.HTTPConnection(SERVER)
    c.request('POST', POST_URL + thing,
              body=json.dumps(content),
              headers= {'Content-type': 'application/json'})
    r = c.getresponse()
    if r.status >= 400:
        print 'Error(%s): %s' % (r.status, r.reason)


def keep_alive(tag, name):
    thing = get_thing(tag)
    name = name
    for i in itertools.count():
        catalog, current_ts = get_dweet(thing)
        catalog[name] = current_ts
        for item, ts in catalog.items():
            if current_ts - ts > TTL:
                catalog.pop(item)
                print '%s is gone' % item
        upd_dweet(thing, catalog)
        catalog, _ = get_dweet(thing)
        if catalog.get(name) == current_ts:
            print '%s is alive!' % name
            break
        if i >= 7:
            print 'Enough for %s' % name
            exit(1)

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "t:n:p:")
    except getopt.GetoptError as err:
        print str(err)  # will print something like "option -a not recognized"
        sys.exit(2)

    tag = None
    name = None
    prefix = PREFIX
    for opt, val in opts:
        if opt == "-t":
            tag = val
        elif opt == "-n":
            name = val
        elif opt == '-p':
            prefix = val

    keep_alive(tag, name)
