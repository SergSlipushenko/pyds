#! /usr/bin/env /usr/bin/python

import httplib
import json
import time
import subprocess
from email.utils import parsedate
import itertools
import random
import getopt
import sys
from pprint import pprint
from ast import  literal_eval

DISCOVERY = 'discover'
REPORT = 'report'
CLUSTER = '7ebb8929'
SCHEMA = 'https://'
SERVER = 'dweet.io'
POST_URL = '/dweet/for/'
GET_URL = '/get/latest/dweet/for/'
FOLLOW_URL = '/follow/'
TTL = 7*60


def get_ifconfig():
    co = subprocess.Popen(['/sbin/ifconfig'], stdout=subprocess.PIPE)
    iface_blocks = [block for block in co.stdout.read().split('\n\n') if block]
    ips = {}
    for block in iface_blocks:
        name = block.split()[0]
        ip = next((line.strip().split(':')[1].split(' ')[0]
                   for line in block.split('\n') if 'inet addr:' in line), None)
        if ip and name != 'lo':
            ips[name] = ip
    return ips


def get_discovery_dweet_name(cluster):
    return '-'.join((DISCOVERY, cluster))


def get_catalog(thing):
    while True:
        time.sleep(1 + random.random()*3)
        c = httplib.HTTPConnection(SERVER)
        c.request('GET', GET_URL + thing, headers={'Content-type': 'application/json'})
        r = c.getresponse()
        if r.status < 300:
            body = json.loads(r.read())
            ts = int(time.mktime(parsedate(r.getheader('date'))))
            if body['this'] == 'succeeded':
                content = body['with'][0]['content']
                return content, ts
            elif body.get('with') == 404:
                return {}, ts


def upd_catalog(thing, content):
    c = httplib.HTTPConnection(SERVER)
    c.request('POST', POST_URL + thing,
              body=json.dumps(content),
              headers= {'Content-type': 'application/json'})
    r = c.getresponse()
    if r.status >= 400:
        print 'Error(%s): %s' % (r.status, r.reason)


def keep_alive(tag, host):
    thing = get_discovery_dweet_name(tag)
    for i in itertools.count():
        catalog, current_ts = get_catalog(thing)
        catalog[host] = current_ts
        for item, ts in catalog.items():
            if current_ts - ts > TTL:
                catalog.pop(item)
                print '%s is gone' % item
        upd_catalog(thing, catalog)
        catalog, _ = get_catalog(thing)
        if catalog.get(host) == current_ts:
            print '%s is alive!' % host
            break
        if i >= 7:
            print 'Enough for %s' % host
            exit(1)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "t:h:c:p:dnu")
    except getopt.GetoptError as err:
        print str(err)  # will print something like "option -a not recognized"
        sys.exit(2)

    if not opts:
        print 'Usage: pyds_agent [-t CLUSTER_TAG] -h HOSTNAME [-p PARAM_KEY:PARAM_VAL]...  [-d] [-n] [-u]'
        exit(1)

    tag = 'default'
    host = None
    cluster = CLUSTER
    dry_run = False
    send_net_cfg = False
    update_ts = False
    data = {}
    for opt, val in opts:
        if opt == "-t":
            tag = val
        elif opt == "-h":
            host = val
        elif opt == '-c':
            cluster = val
        elif opt == '-p':
            if ':' in val:
                k, v = val.split(':')
                try:
                    data[k] = literal_eval(v)
                except SyntaxError:
                    data[k] = v
            else:
                data[val] = None
        elif opt == '-n':
            send_net_cfg = True
        elif opt == '-d':
            dry_run = True
        elif opt == '-u':
            update_ts = True

    discover_dweet = get_discovery_dweet_name(cluster)
    print 'Update discovery on %s' % SCHEMA + SERVER + POST_URL + discover_dweet

    report_dweet = '-'.join((REPORT, cluster, tag, host))
    print 'Report to %s' % SCHEMA + SERVER + POST_URL + report_dweet

    if send_net_cfg:
        data.update(get_ifconfig())

    if not dry_run:
        if update_ts:
            keep_alive(tag, host)

        h = httplib.HTTPSConnection(SERVER)
        headers = {'Content-type': 'application/json'}
        h.request('POST', POST_URL + report_dweet, json.dumps(data), headers)
        r = h.getresponse()
        if r.status == 200:
            print 'Ok'
            print 'Follow link %s' % SCHEMA + SERVER + FOLLOW_URL + report_dweet
        else:
            print 'HTTP error %s' % r.status

    pprint(data)
