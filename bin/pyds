#! /usr/bin/env python
# *-* coding: utf8 *-*

import getopt
import urllib2
import httplib
import json
import sys
import time
from email.utils import parsedate


DISCOVERY = 'discover'
REPORT = 'report'
PREFIX = '7ebb8929'
SCHEMA = 'https://'
SERVER = 'dweet.io'
POST_URL = '/dweet/for/'
GET_URL = '/get/latest/dweet/for/'
FOLLOW_URL = '/follow/'
TTL = 5*60


def get_discovery_dweet(cluster):
    if cluster:
        return '-'.join((DISCOVERY, PREFIX, cluster))
    else:
        return '-'.join((DISCOVERY, PREFIX))


def get_report_dweet(cluster, host):
    if cluster:
        return '-'.join((REPORT, PREFIX, cluster, host))
    else:
        return '-'.join((REPORT, PREFIX, host))


def get_dweet(thing):
    while True:
        c = httplib.HTTPSConnection(SERVER)
        c.request('GET', GET_URL + thing, headers={'Content-type': 'application/json'})
        r = c.getresponse()

        if r.status < 300:
            body = json.loads(r.read())
            ts = int(time.mktime(parsedate(r.getheader('date')))) - time.altzone
            if body['this'] == 'succeeded':
                content = body['with'][0]['content']
                return content, ts
            elif body.get('with') == 404:
                return {}, ts
        print r
        time.sleep(1)


def print_catalog(cluster):
    catalog, current_ts = get_dweet(get_discovery_dweet(cluster))
    sorted_catalog = sorted(catalog.items(), key=lambda item: item[1], reverse=True)
    for name, ts in sorted_catalog:
        print '%s: %ss ago' % (name, current_ts - ts)


def print_report(cluster, host):
    report, _ = get_dweet(get_report_dweet(cluster, host))
    print json.dumps(report, indent=2)


def print_hosts(cluster):
    hosts = []
    catalog, _ = get_dweet(get_discovery_dweet(cluster))
    for host in catalog:
        report, _ = get_dweet(get_report_dweet(cluster, host))
        if 'external' in report and report['external'] in report:
            hosts.append('%s\t%s' % (report[report['external']], host))
    print '\n'.join(hosts)


# def update_hosts(cluster):
#     raw_catalog, _ = get_dweet(get_discovery_dweet(cluster))
#     catalog = {}
#     for host in raw_catalog:
#         report, _ = get_dweet(get_report_dweet(cluster, host))
#         if 'external' in report and report['external'] in report:
#             catalog[host] = '%s\t%s' % (host, report[report['external']])
#
#     upd_hosts = []
#     with open('/etc/hosts') as f_hosts:
#         hosts = f_hosts.read().split('\n')
#     for line in hosts:
#         for host in catalog:
#             if line.startswith(host):
#                 line = catalog[host]
#                 catalog.pop(host)
#         upd_hosts.append(line)
#     upd_hosts.extend(catalog.values())
#     print '\n'.join(upd_hosts)

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "c:h:u")
    except getopt.GetoptError as err:
        print str(err)
        sys.exit(2)

    cluster = None
    host = None
    upd_hosts = False
    for opt, val in opts:
        if opt == '-c':
            cluster = val
        if opt == '-h':
            host = val
        if opt == '-u':
            upd_hosts = True

    if upd_hosts:
        print_hosts(cluster)
        exit(1)

    if host is None:
        print 'Get catalog from %s' % (SCHEMA + SERVER + GET_URL + get_discovery_dweet(cluster))
        print_catalog(cluster)
    else:
        print 'Get report from %s' % (SCHEMA + SERVER + GET_URL + get_report_dweet(cluster, host))
        print_report(cluster, host)
