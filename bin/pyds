#! /usr/bin/env python
# *-* coding: utf8 *-*

import getopt
import httplib
import json
import sys
import time
import os
from email.utils import parsedate
from collections import OrderedDict


DISCOVERY = 'discover'
REPORT = 'report'
PREFIX = '7ebb8929'
SCHEMA = 'https://'
SERVER = 'dweet.io'
POST_URL = '/dweet/for/'
GET_URL = '/get/latest/dweet/for/'
FOLLOW_URL = '/follow/'
TTL = 5*60


def get_discovery_dweet(cluster):
    if cluster:
        return '-'.join((DISCOVERY, PREFIX, cluster))
    else:
        return '-'.join((DISCOVERY, PREFIX))


def get_report_dweet(cluster, host):
    if cluster:
        return '-'.join((REPORT, PREFIX, cluster, host))
    else:
        return '-'.join((REPORT, PREFIX, host))


def get_dweet(thing):
    while True:
        c = httplib.HTTPSConnection(SERVER)
        c.request('GET', GET_URL + thing, headers={'Content-type': 'application/json'})
        r = c.getresponse()

        if r.status < 300:
            body = json.loads(r.read())
            ts = int(time.mktime(parsedate(r.getheader('date')))) - time.altzone
            if body['this'] == 'succeeded':
                content = body['with'][0]['content']
                return content, ts
            elif body.get('with') == 404:
                return {}, ts
        time.sleep(1)


def get_summary(cluster, report_all, params=None):
    catalog, current_ts = get_dweet(get_discovery_dweet(cluster))
    sorted_catalog = sorted(catalog.items(), key=lambda item: item[1], reverse=True)
    summary = OrderedDict()
    for host, ts in sorted_catalog:
        raw_report = {
            'follow_url': SCHEMA + SERVER + FOLLOW_URL + get_report_dweet(cluster, host),
            'last_report': current_ts - ts
        }
        if report_all:
            raw_report.update(get_dweet(get_report_dweet(cluster, host))[0])
        if params:
            report = {k: raw_report[k] for k in params}
        else:
            report = raw_report
        summary[host] = report
    return summary


def print_catalog(cluster, report_all, params):
    print json.dumps(get_summary(cluster, report_all, params), indent=2)


def print_report(cluster, host):
    report, _ = get_dweet(get_report_dweet(cluster, host))
    report['follow_url'] = SCHEMA + SERVER + FOLLOW_URL + get_report_dweet(
        cluster, host)
    print json.dumps(report, indent=2)


def update_hosts(cluster, force):
    raw_catalog, _ = get_dweet(get_discovery_dweet(cluster))
    hosts_cluster = []
    for host in raw_catalog:
        report, _ = get_dweet(get_report_dweet(cluster, host))
        if 'external' in report and report['external'] in report:
            hosts_cluster.append(
                '%s\t%s.%s' % (report[report['external']], host, cluster))
    upd_hosts = []
    with open('/etc/hosts') as f_hosts:
        hosts_lines = f_hosts.read().split('\n')
    start = '# PYDS(%s) >>' % cluster
    stop = '# PYDS(%s) <<' % cluster
    if start not in hosts_lines:
        if hosts_cluster:
            upd_hosts = hosts_lines
            upd_hosts.append(start)
            upd_hosts.extend(hosts_cluster)
            upd_hosts.append(stop)
            upd_hosts.append('')
        else:
            upd_hosts = hosts_lines
    else:
        if hosts_cluster:
            upd_hosts.extend(hosts_lines[:hosts_lines.index(start)+1])
            upd_hosts.extend(hosts_cluster)
            upd_hosts.extend(hosts_lines[hosts_lines.index(stop):])
        else:
            upd_hosts.extend(hosts_lines[:hosts_lines.index(start)])
            upd_hosts.extend(hosts_lines[hosts_lines.index(stop)-1:])
    if force:
        with open('/etc/hosts', mode='w') as f:
            f.write('\n'.join(upd_hosts))
    else:
        print '\n'.join(upd_hosts)


def inventory():
    cluster = os.environ.get('PYDS_CLUSTER') or 'spark'
    raw_catalog = get_summary(cluster, report_all=True)
    cluster_vars = {
        'ansible_ssh_common_args': '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null',
        'ansible_ssh_pass': 'ubuntu',
        'ansible_ssh_user': 'ubuntu'
    }
    cluster_vars.update(
        {k.lower(): os.environ[k]
         for k in os.environ
         if k.lower().startswith('ansible_')})

    env = {
        cluster: {
            'hosts': ['%s.%s' % (host, cluster) for host in raw_catalog.keys()],
            'vars': cluster_vars,
            '_meta': {
                'hostvars': {'%s.%s' % (host, cluster): {'ansible_host': values[values['external']]} for host, values in raw_catalog.items() if 'external' in values}
            }
        }
    }
    print json.dumps(env, indent=2)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "c:dh:ufp:", longopts=['list', 'host'])
    except getopt.GetoptError as err:
        print str(err)
        sys.exit(2)

    if not opts:
        print 'Usage: ./pyds [-c CLUSTER] [-d] [-h HOST] [-u [-f]] [--list]'
        exit(1)

    cluster = None
    report_all = False
    host = None
    show_hosts = False
    upd_hosts = False
    force = False
    params = []
    for opt, val in opts:
        if opt == '-c':
            cluster = val
        if opt == '-d':
            report_all = True
        if opt == '-h':
            host = val
        if opt == '-u':
            upd_hosts = True
        if opt == '-f':
            force = True
        if opt == '-p':
            params.append(val)
        if opt == '--host':
            print '{}'
            exit()
        if opt == '--list':
            inventory()
            exit()


    if upd_hosts:
        update_hosts(cluster, force)
        exit()

    if host is None:
        print_catalog(cluster, report_all, params)
    else:
        print_report(cluster, host)
